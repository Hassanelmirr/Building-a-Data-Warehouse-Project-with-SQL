

CREATE VIEW gold.report_customers AS

WITH base_query AS(
/* -----------------------------------------------------------
1- Base Query : Retrieves core columns from tables
-------------------------------------------------------------- */
SELECT
	c.customer_key,
	c.customer_number,
	CONCAT(c.first_name,' ', c.last_name) AS customer_name,
	c.gendar,
	DATEDIFF(year, c.birth_date, GETDATE()) AS Age,         -- 1st CTE intermediate
	f.order_date,
	f.total_sales,
	f.quantity,
	f.order_number,
	f.product_key
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_id = c.customer_id
WHERE f.order_date IS NOT NULL)

, customer_aggregation AS(

/* -----------------------------------------------------------
2- customers Aggregations: summarize key metrics at the customer level
-------------------------------------------------------------- */
SELECT 
	-- AGGREGATE CUSTOMER LEVEL METRICS: 
	customer_key,
	customer_number,
	customer_name,                                                -- 2nd intermediate query 
	gendar,
	Age,
	COUNT(DISTINCT order_number) AS total_orders,
	MAX(order_date) AS last_order_date,
	DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifespan,
	SUM(total_sales) AS total_sales,
	SUM(quantity) AS total_quantity, 
	COUNT(DISTINCT product_key) AS total_products
FROM base_query
GROUP BY customer_key,
	customer_number,
	customer_name,
	gendar,
	Age) 
/* -----------------------------------------------------------
3- segment customers into categories, and calculate valuable KPIS
-------------------------------------------------------------- */

SELECT                    -- main query 
	customer_key,
	customer_number,
	customer_name,
	gendar,
	Age,
	CASE
		WHEN Age < 18 THEN 'Child'
		WHEN Age BETWEEN 18 AND 30 THEN 'Adult'
		WHEN Age BETWEEN 31 AND 50 THEN 'Middle Aged'
		ELSE 'Aged'
	END AS age_group,
	total_orders,
	total_sales,
	CASE 
		WHEN total_sales < 100 THEN 'less than 100'
		WHEN total_sales BETWEEN 100 AND 999 THEN '100 - 999'
		WHEN total_sales BETWEEN 1000 AND 1999 THEN '1000 - 4999'
		WHEN total_sales BETWEEN 2000 AND 9999 THEN '5000 - 9999'
		ELSE 'more than 10,000'
	END sales_range,
	lifespan,
		CASE 
		WHEN lifespan > 24 THEN 'VIP'
		WHEN lifespan BETWEEN 12 AND 23 THEN 'Regular'
		ELSE 'New'
	END customer_segment,
	last_order_date,
	DATEDIFF(month, last_order_date, GETDATE()) recency,
	total_sales / NULLIF(total_orders,0) AS avg_order_value,
	total_sales / NULLIF(lifespan,0) AS avg_monthly_spend,
	total_quantity,
	total_products
FROM customer_aggregation

/* ------------------------------------------------------------------------
===========================================================================
------------------------------------------------------------------------ */

CREATE VIEW gold.report_products AS

WITH based_query AS(

/* -----------------------------------------------------------
1- Base Query : Retrieves core columns from tables
-------------------------------------------------------------- */

SELECT 
	p.product_key,
	f.order_number,
	f.customer_id,
	f.order_date,
	f.total_sales,
	f.quantity,
	p.product_name,
	p.category,
	p.subcategory,
	p.cost,
	p.product_line
FROM gold.fact_sales f
LEFT JOIN gold.dim_product p
ON f.product_key = p.product_number
WHERE order_date IS NOT NULL)

, product_aggregation AS(

/* -----------------------------------------------------------
2- products Aggregations: summarize key metrics at the products level
-------------------------------------------------------------- */

SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	COUNT(DISTINCT order_number) As total_orders,
	COUNT(DISTINCT customer_id) AS total_customers,
	SUM(total_sales) as total_revenues,
	SUM(quantity) as total_quantity,
	DATEDIFF(month, MIN(order_date), MAX(order_date))AS lifespan,
	MAX(order_date) AS last_order_date,
	avg(cost) as avg_cost,
	ROUND(AVG(CAST(total_sales AS FLOAT) / NULLIF(quantity,0)), 1) AS avg_price_selling
FROM based_query
GROUP BY product_key,
		product_name,
		category,
		subcategory
)
/* -----------------------------------------------------------
3- segment products into categories, and calculate valuable KPIS
-------------------------------------------------------------- */


SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	total_orders,
	avg_cost,
	lifespan,
	CASE 
		WHEN lifespan >24 THEN 'VIP'
		WHEN lifespan BETWEEN 12 AND 23 THEN 'Regular'
		ELSE 'New'
	END customer_segment,
	CASE
		WHEN avg_cost > avg_price_selling THEN 'Loss'
		WHEN avg_cost < avg_price_selling THEN 'Profit'
		ELSE 'Break-even'
	END prod_situation,
	last_order_date,
	total_customers,
	total_revenues,
	CASE 
		WHEN total_revenues > 50000 THEN 'High performance'
		WHEN total_revenues >= 10000 THEN 'Mid-Range'
		ELSE 'Low Performer'
	END prod_performance,
	total_revenues / NULLIF(total_orders,0) AS avg_order_revenue,
	total_customers / NULLIF(lifespan,0) AS avg_monthly_revenue,
	total_quantity,
	avg_price_selling
FROM product_aggregation 

