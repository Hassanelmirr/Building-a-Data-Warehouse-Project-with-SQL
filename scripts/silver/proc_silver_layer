/*
========================================================
Stored Procedure : Load Silver Layer (Bronze -> Silver)

Sript purpose : 
    This stored procedure performs the ETL process to populate the 'silver' schema tables from the 'bronze' shema.
    
  Actions Perfomed: 
    - Truncates Silver tables.
    - Inserts transformed and cleansed data from Bronze into Silver tables.
  
Usage Example : 
EXEC load.silver_layer
========================================================
*/


CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	BEGIN TRY
		PRINT '========================================'
		PRINT 'Applying ETL process on Silver layer'
		PRINT '========================================'

		Print '>> Truncating table : silver.crm_cust_info';
		TRUNCATE TABLE silver.crm_cust_info;
		Print '>> Inserting table : silver.crm_cust_info';


		INSERT INTO silver.crm_cust_info(
			cst_id,
			cst_key,
			cst_firstname,
			cst_lastname,
			cst_material_status,
			cst_gndr,
			cst_create_date)

		SELECT 
			cst_id,
			cst_key,
			TRIM(cst_firstname) AS cst_firstname,
			TRIM(cst_lastname) AS cst_lastname,
			CASE WHEN UPPER(TRIM(cst_material_status))   = 'M' THEN 'Maried'
				 WHEN UPPER(TRIM(cst_material_status))   = 'S' THEN 'Single' 
				 ELSE 'N/A'
			END cst_material_status,
			CASE WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
				 WHEN UPPER (TRIM(cst_gndr)) = 'F' THEN 'Female'
				 ELSE 'N/A'
			END cst_gndr,
			cst_create_date
		From(
			SELECT *,
			ROW_NUMBER() OVER( PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
			FROM bronze.crm_cust_info
		)t WHERE flag_last = 1


		PRINT '----------------------------------------'


		Print '>> Truncating table: silver.crm_prd_info';
		TRUNCATE TABLE silver.crm_prd_info;
		Print '>> Inserting table : silver.crm_prd_info';
		INSERT INTO silver.crm_prd_info(
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)

		SELECT 
			prd_id,
			REPLACE(SUBSTRING(prd_key,1,5), '-', '_' ) AS cat_id,  --- Extract category ID
			SUBSTRING(prd_key, 7, len(prd_key)) AS prd_key,  --- EXTRACT product key
			prd_nm,
			ISNULL( prd_cost, 0) AS prd_cost,
			CASE
				WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
				WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
				WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
				WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
				ELSE 'N/A'
			END prd_line,
			CAST(prd_start_dt AS DATE) AS prd_start_dt,
			CAST(
				LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE
			)
			AS prd_end_dt ---Calculate end date as one day before the next start date
		FROM bronze.crm_prd_info

		PRINT '----------------------------------------'


		Print '>> Truncating table: silver.crm_sales_details';
		TRUNCATE TABLE silver.crm_sales_details;
		Print '>> Inserting table : silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details(
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales,
			sls_quantity,
			sls_price
		)

		SELECT 
			TRIM(sls_ord_num) AS sls_prd_key ,
			TRIM(sls_prd_key) AS sls_prd_key,
			sls_cust_id,
			CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
			END sls_order_dt,
			CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
			END sls_ship_dt,
			CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
			END sls_due_dt,
			CASE 
				WHEN sls_sales IS NULL OR sls_sales != sls_quantity * ABS(sls_price) OR sls_sales <= 0
				THEN sls_quantity * ABS(sls_price)
				ELSE sls_sales
			END sls_sales,
			sls_quantity,
			CASE
			WHEN sls_price IS NULL OR sls_price <= 0 OR sls_price != sls_sales/ NULLIF(sls_quantity,0)
				THEN sls_sales/sls_quantity
				ELSE sls_price
			END sls_price
		FROM bronze.crm_sales_details


		PRINT '----------------------------------------'



		Print '>> Truncating table : silver.erp_cust_az12';
		TRUNCATE TABLE silver.erp_cust_az12;
		Print '>> Inserting table : silver.erp_cust_az12';


		INSERT INTO silver.erp_cust_az12(cid, bdate,gen)

		SELECT 
			CASE
			WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
				ELSE cid
			END cid,
			CASE
				WHEN bdate > GETDATE() OR  bdate < '19200101' THEN NULL
				 -- They died so I don't need them 
				 ELSE bdate
			END bdate,
			CASE
				WHEN UPPER(TRIM(gen)) = ' ' THEN 'N/A'
				WHEN UPPER(TRIM(gen)) IN( 'F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ( 'M','MALE') THEN 'Male'
				WHEN UPPER(TRIM(gen)) IS NULL THEN 'N/A'
			ELSE gen
			END gen
		FROM bronze.erp_cust_az12


		PRINT '----------------------------------------'


		Print '>> Truncating table: silver.erp_loc_a101';
		TRUNCATE TABLE silver.erp_loc_a101;
		Print '>> Inserting table : silver.erp_loc_a101';

		INSERT INTO silver.erp_loc_a101(cid,cntry)

		SELECT DISTINCT
			TRIM(REPLACE(cid, '-','')) AS cid,
			CASE
				WHEN UPPER(TRIM(cntry)) = ' ' OR cntry IS NULL THEN 'N/A'
				WHEN UPPER(TRIM(cntry)) IN ('USA','US') THEN 'United States'
				WHEN UPPER(TRIM(cntry)) = 'DE' THEN 'Germany'
				ELSE TRIM(cntry)
			END cntry
		FROM bronze.erp_loc_a101 

		PRINT '----------------------------------------'

		Print '>> Truncating table : silver.erp_px_cat_g1v2';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
		Print '>> Inserting table : silver.erp_px_cat_g1v2';

		INSERT INTO silver.erp_px_cat_g1v2( id,cat, subcat, maintenance)

		SELECT
			id,
			cat,
			subcat,
			maintenance
		FROM bronze.erp_px_cat_g1v2
	END TRY
	BEGIN CATCH 
		PRINT '======================================'
		PRINT 'ERROR OCCURED DURING LOADING SILVER LAYER'
		PRINT 'ERROR MESSAGE :' + ERROR_MESSAGE()
		PRINT '======================================'
	END CATCH
END

