---------------------------------------------------
-- DATABASE EXPLORATION
---------------------------------------------------

-- EXPLORE ALL THE OBJECTS IN THE DATABASE.

SELECT * FROM INFORMATION_SCHEMA.TABLES

-- EXPLORE ALL THE COLUMNS IN THE DATABASE.

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'

---------------------------------------------------
-- DIMENSIONS EXPLORATION
---------------------------------------------------

-- EXPLORY ALL COUNTRIES OUR CUSTOMERS COME FROM :

SELECT DISTINCT country FROM gold.dim_customers

-- EXPLOR all CATEGORIES FROM OUR BUSINESS:

SELECT DISTINCT category, subcategory,product_name FROM gold.dim_product
ORDER BY 1,2,3


---------------------------------------------------
-- DATE EXPLORATION
---------------------------------------------------

-- Find the date of the first and the last order

SELECT 
	'First order' AS Measure_name , MIN(order_date) AS Measure_value,
	'Last order' AS Measure_name, MAX(order_date) AS Measure_value,
	DATEDIFF(DAY, MIN(order_date), MAX(order_date) ) AS Age_of_company 
FROM gold.fact_sales

-- AGE OF CUSTOMERS

SELECT 
	MIN(birth_date) AS Oldest_customer ,
	DATEDIFF(Year, MIN(Birth_date), GETDATE()) AS Age,
	MAX(birth_date) AS Youngest_customer ,
	DATEDIFF(Year, MAX(Birth_date), GETDATE()) AS Age
FROM gold.dim_customers

---------------------------------------------------
-- MEASURE EXPLORATION
---------------------------------------------------

SELECT * FROM INFORMATION_SCHEMA.COLUMNS


-- Total sales
SELECT 
	SUM(total_sales) AS Total_Revenues
FROM gold.fact_sales


-- Items sold
SELECT 
	SUM(quantity) AS Items_sold
FROM gold.fact_sales

-- average selling price

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT AVG(price) AS Avg_price FROM gold.fact_sales

-- total nb of orders

SELECT COUNT( order_number) AS total_nb_orders
FROM gold.fact_sales  -- doesn't make sense, the nb of orders could be duplicated

SELECT COUNT(DISTINCT(order_number)) AS total_nb_orders
FROM gold.fact_sales

-- total nb of products 

SELECT 
	COUNT(DISTINCT(product_key)) AS total_nb_products
FROM gold.fact_sales

-- total nb of customers


SELECT 
	'total by id' as measure_name,COUNT(customer_key) as measure_value
FROM gold.dim_customers

UNION ALL
SELECT 
	'total by nb' as measure_name, COUNT(customer_number)as measure_value
FROM gold.dim_customers

-- total nb of customers that has placed an order

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT COUNT(DISTINCT(customer_id)) AS nb_of_customers
FROM gold.dim_customers

------------------------------------------------------------------------
--   CREATION A REPORT OF THESE MEASURES
------------------------------------------------------------------------

SELECT 'Total Revenues' AS measure_name, SUM(total_sales) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Items sold' as measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Avg price' as measure_name, AVG(price) AS meaure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_nb_orders' as measrue_name, COUNT(DISTINCT(order_number)) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 
	'total_nb_products' as measure_name, COUNT(DISTINCT(product_key)) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Nb of customers' as measure_name, COUNT(DISTINCT(customer_id)) AS measure_value FROM gold.dim_customers
UNION ALL
SELECT 'nb of customers has order' as measure_name, COUNT(DISTINCT(customer_id)) AS measure_value FROM gold.dim_customers


---------------------------------------------------
-- MAGNITUDE EXPLORATION
---------------------------------------------------

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

-- Total customers by country

SELECT country,
	COUNT(customer_key) AS nb_of_customers
FROM gold.dim_customers
GROUP BY country;

-- total customers by gender

SELECT gendar,
	COUNT(customer_key) AS nb_of_customers
FROM gold.dim_customers
GROUP BY gendar;

-- total products by category 

SELECT category,
	COUNT(DISTINCT(product_key)) AS nb_of_customers
FROM gold.dim_product
GROUP BY category;

-- Average cost in each category

SELECT 
	category,
	AVG(cost) AS avg_cost
FROM gold.dim_product
GROUP BY category;

-- total revenue generated for each category 

SELECT 
	dim.category,
	SUM(fact.total_sales) AS total_revenue
FROM gold.fact_sales fact
LEFT JOIN gold.dim_product dim
ON dim.product_number = fact.product_key 
GROUP BY dim.category
ORDER BY total_revenue DESC


-- total  revenue generated by each customer

SELECT * FROM gold.dim_customers
select * from gold.fact_sales


SELECT 
	dim.customer_number,
	dim.first_name,
	dim.last_name,
	SUM(fact.total_sales) AS total_revenue
FROM gold.fact_sales fact
LEFT JOIN gold.dim_customers dim
ON dim.customer_id = fact.customer_id
GROUP BY dim.customer_number, dim.first_name, dim.last_name
ORDER BY total_revenue DESC

-- The distribution of sold items accross all countries

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT country from gold.dim_customers
SELECT * FROM gold.fact_sales

SELECT
	dim.country,
	SUM(fact.quantity) AS Items_sold
FROM gold.fact_sales fact
LEFT JOIN gold.dim_customers dim
ON fact.customer_id = dim.customer_id
GROUP BY country
ORDER BY Items_sold DESC


---------------------------------------------------
-- RANKING ANALYSIS
---------------------------------------------------

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT * FROM gold.dim_product
SELECT * FROM gold.fact_sales

-- top 5 products generate the highest revenues

SELECT TOP 5 
	dim.subcategory,
	SUM(fact.total_sales) AS total_revenue
FROM gold.fact_sales fact
LEFT JOIN gold.dim_product dim
ON dim.product_number = fact.product_key
GROUP BY dim.subcategory
ORDER BY total_revenue DESC

-- what are the 5 worst performing product in terms of sales?

SELECT TOP 5 
	dim.subcategory,
	SUM(fact.total_sales) AS total_revenue
FROM gold.fact_sales fact
LEFT JOIN gold.dim_product dim
ON dim.product_number = fact.product_key
GROUP BY dim.subcategory
ORDER BY total_revenue ASC

-- second way

SELECT *
FROM(
	SELECT 
	dim.subcategory,
	SUM(fact.total_sales) AS total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(fact.total_sales) ASC) AS Rank_products
--RANK() OVER(ORDER BY SUM(fact.total_sales) ASC) AS Rank_products
	FROM gold.fact_sales fact
	LEFT JOIN gold.dim_product dim
	ON dim.product_number = fact.product_key
	GROUP BY dim.subcategory)t 
WHERE Rank_products <5


-- TOP 10 customers that have generated the highest revenue and orders

SELECT * FROM gold.dim_customers

SELECT * 
FROM(
SELECT 
	dim.customer_key,
	dim.first_name,
	dim.last_name,
	ROW_NUMBER() OVER( ORDER BY SUM(total_sales) DESC) AS Rank_revenues,
	SUM(total_sales) AS total_revenues,
	COUNT(DISTINCT(fact.order_number)) AS total_orders
	FROM gold.fact_sales fact
LEFT JOIN gold.dim_customers dim
ON dim.customer_id = fact.customer_id
GROUP BY dim.customer_key, dim.first_name, dim.last_name)t
WHERE Rank_revenues <= 10

--TOP 3 customers with the fewest orders placed

SELECT * 
FROM(
SELECT 
	dim.customer_key,
	dim.first_name,
	dim.last_name,
	SUM(total_sales) AS total_revenues,
	COUNT(DISTINCT(fact.order_number)) AS total_orders,
	ROW_NUMBER() OVER( ORDER BY COUNT(DISTINCT(fact.order_number)) ASC) AS Rank_orders
	FROM gold.fact_sales fact
LEFT JOIN gold.dim_customers dim
ON dim.customer_id = fact.customer_id
GROUP BY dim.customer_key, dim.first_name, dim.last_name)t
WHERE Rank_orders <= 3
